Note: This definitely needs type annotations/specifications (-spec ...)!
Did some fake PureScript type annotations. But needs proper Erlang type specs to be used with Dialyzer.

Compilation:
$ erlc resource_discovery.erl

I.) Testing with only one node

Start Erlang and check state of process named resource_discovery:
$ erl
1> observer:start(). % optional (just to see what's going on)
2> resource_discovery:start_link().
3> resource_discovery:add_target_resource_type(simple_cache).     <<< add entry to the "I want" list
ok
4> resource_discovery:add_local_resource(simple_cache, self()).   <<< add (dummy) entry to "I have" list
ok
5> resource_discovery:fetch_resources(simple_cache).              <<< simple_cache not known in cluster
error
6> resource_discovery:trade_resources().                          <<< exchange all resources in the cluster
ok
7> resource_discovery:fetch_resources(simple_cache).              <<< simple_cache now known in cluster
{ok,[<0.82.0>]}
8>

II.) Do the same in a real cluster with two nodes:

$ erl -sname n1                                                  $ erl -sname n2
1> net_adm:ping(n2@pc1).                                                                                                              <<< setup cluster
2> observer:start(). % optional                                  1> observer:start(). % optional
3> resource_discovery:start_link().                              2> resource_discovery:start_link().                                  <<< starts process resource_discovery on both nodes
4> resource_discovery:add_target_resource_type(simple_cache).    3> resource_discovery:add_target_resource_type(simple_cache).        <<< add entry to the "I want" list on both nodes
                                                                 3> resource_discovery:add_local_resource(simple_cache, self()).      <<< add (dummy) entry to "I have" list on node n2
5> resource_discovery:trade_resources().                                                                                              <<< resources are exchanged on both nodes (remote PIDs are automagically converted/displayed!!!)
5> resource_discovery:fetch_resources(simple_cache).             4> resource_discovery:fetch_resources(simple_cache).                 <<< get simple_cache resource
{ok,[<16570.88.0>]}                                              {ok,[<0.88.0>]}                                                      <<< Local PIDs are translated automagically on remote nodes!!!
